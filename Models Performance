from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
model = LogisticRegression(max_iter=1000)# Import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
# Preprocess the categorical variables using one-hot encoding
#data = pd.get_dummies(data, columns=["Geography", "Gender"])

# Split into features (X) and target (y)
X = data.drop("number_customer_service_calls", axis=1)
y = data["number_customer_service_calls"]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "Support Vector Machine": SVC()
}
results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)  # Specify 'weighted' for multiclass
    recall = recall_score(y_test, y_pred, average='weighted')  # Specify 'weighted' for multiclass
    f1 = f1_score(y_test, y_pred, average='weighted')  # Specify 'weighted' for multiclass
    
    results[name] = {"Accuracy": accuracy, "Precision": precision, "Recall": recall, "F1": f1}

# Display evaluation results
print("Model Evaluation Results:")
for name, metrics in results.items():
    print(f"Model: {name}")
    print(f"Accuracy: {metrics['Accuracy']:.2f}")
    print(f"Precision: {metrics['Precision']:.2f}")
    print(f"Recall: {metrics['Recall']:.2f}")
    print(f"F1 Score: {metrics['F1']:.2f}")
    print()
